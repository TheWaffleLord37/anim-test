name: Cycle main.png through frames

on:
  workflow_dispatch:         # Allows manual trigger from Actions tab

jobs:
  update-frame:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      # Enforce 1-minute rate limit
      - name: Rate limit check
        id: ratelimit
        run: |
          NOW=$(date +%s)
          LAST=$(cat .last_run 2>/dev/null || echo 0)
          GAP=$(( NOW - LAST ))
          if [ $GAP -lt 60 ]; then
            echo "Run blocked due to rate limit ($GAP seconds since last run)"
            echo "ratelimited=true" >> "$GITHUB_OUTPUT"
          else
            echo "ratelimited=false" >> "$GITHUB_OUTPUT"
            echo $NOW > .last_run
          fi

      # Read current index from the pointer file
      - name: Read current index
        if: steps.ratelimit.outputs.ratelimited == 'false'
        id: idx
        run: |
          INDEX=$(cat frame_index.txt)
          echo "index=$INDEX" >> "$GITHUB_OUTPUT"

      # Copy the corresponding frame over main.png
      - name: Replace main.png with selected frame
        if: steps.ratelimit.outputs.ratelimited == 'false'
        run: |
          cp "frames/${{ steps.idx.outputs.index }}.png" main.png

      # Calculate and write the next index (wrap 4 → 1)
      - name: Bump pointer
        if: steps.ratelimit.outputs.ratelimited == 'false'
        id: bump
        run: |
          CUR=${{ steps.idx.outputs.index }}
          NEXT=$(( CUR == 4 ? 1 : CUR + 1 ))
          echo "cur=$CUR" >> "$GITHUB_OUTPUT"
          echo "next=$NEXT" >> "$GITHUB_OUTPUT"
          echo $NEXT > frame_index.txt

      # Commit only if something actually changed
      - name: Commit & push if updated
        if: steps.ratelimit.outputs.ratelimited == 'false'
        run: |
          git config --global user.name  "github-actions"
          git config --global user.email "github-actions@github.com"
          git add main.png frame_index.txt .last_run
          git diff --cached --quiet && echo "No changes" || \
            (git commit -m "Auto-update to frame ${{ steps.bump.outputs.cur }}" && git push)

      # 20-second delay before notifications
      - name: Wait 20 seconds
        if: steps.ratelimit.outputs.ratelimited == 'false'
        run: sleep 20

      # Discord notification for rollover (4 → 1)
      - name: Notify Discord (rollover)
        if: ${{ success() && steps.ratelimit.outputs.ratelimited == 'false' && steps.bump.outputs.cur == '1' }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"<@&438804971300061185>\\n## Flutterdance template updated to frame 1 (animation restarted)\\nRefresh your template or reopen it with the link below!\\n# [Template](<https://pxls.space/#x=1450&y=1368&scale=8&template=https%3A%2F%2Fraw.githubusercontent.com%2FTheWaffleLord37%2FManePxls-Templates%2Frefs%2Fheads%2Fmain%2FCanvas%2090%2FFlutterdance.png&ox=1396&oy=1321&tw=108&title=Flutterdance&convert=nearestCustom>)\\n-# dinkdonk new frame [⠀](https://cdn.discordapp.com/emojis/1375011774067376128.webp?size=128&animated=true)\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}

      # Discord notification for normal frame update
      - name: Notify Discord (normal)
        if: ${{ success() && steps.ratelimit.outputs.ratelimited == 'false' && steps.bump.outputs.cur != '1' }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"<@&438804971300061185>\\n## Flutterdance template updated to frame **${{ steps.bump.outputs.cur }}**\\nRefresh your template or reopen it with the link below!\\n# [Template](<https://pxls.space/#x=1450&y=1368&scale=8&template=https%3A%2F%2Fraw.githubusercontent.com%2FTheWaffleLord37%2FManePxls-Templates%2Frefs%2Fheads%2Fmain%2FCanvas%2090%2FFlutterdance.png&ox=1396&oy=1321&tw=108&title=Flutterdance&convert=nearestCustom>)\\n-# dinkdonk new frame [⠀](https://cdn.discordapp.com/emojis/1375011774067376128.webp?size=128&animated=true)\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}
